// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	internal "project2/app/internal"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProject2Service is a mock of Project2Service interface.
type MockProject2Service struct {
	ctrl     *gomock.Controller
	recorder *MockProject2ServiceMockRecorder
}

// MockProject2ServiceMockRecorder is the mock recorder for MockProject2Service.
type MockProject2ServiceMockRecorder struct {
	mock *MockProject2Service
}

// NewMockProject2Service creates a new mock instance.
func NewMockProject2Service(ctrl *gomock.Controller) *MockProject2Service {
	mock := &MockProject2Service{ctrl: ctrl}
	mock.recorder = &MockProject2ServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProject2Service) EXPECT() *MockProject2ServiceMockRecorder {
	return m.recorder
}

// GetTopTenUsedWords mocks base method.
func (m *MockProject2Service) GetTopTenUsedWords(request internal.GetTopTenUsedWordsRequest) (internal.GetTopTenUsedWordsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopTenUsedWords", request)
	ret0, _ := ret[0].(internal.GetTopTenUsedWordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopTenUsedWords indicates an expected call of GetTopTenUsedWords.
func (mr *MockProject2ServiceMockRecorder) GetTopTenUsedWords(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopTenUsedWords", reflect.TypeOf((*MockProject2Service)(nil).GetTopTenUsedWords), request)
}
